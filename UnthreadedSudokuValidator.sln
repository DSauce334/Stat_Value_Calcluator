#include <iostream>
typedef char board_type[9][9];

bool verify_block(board_type board, unsigned blockID)
{
	unsigned digits[9] = { 0 };

	const unsigned rowBegin = (blockID / 3) * 3;
	const unsigned colBegin = (blockID % 3) * 3;

	for (unsigned i = 0; i < 3; ++i)
		for (unsigned j = 0; j < 3; ++j)
			if (digits[board[rowBegin + i][colBegin + j] - 1]++)
				return false;

	return true;
}

bool subsq_verify(board_type board)
{
	bool verified = true;
	for (unsigned i = 0; i < 9; ++i)
		if (!verify_block(board, i))
		{
			std::cout << "Sub-square " << i + 1 << " is not correct.\n";
			verified = false;
		}

	return verified;
}

int main()
{
	board_type correctBoard =
	{
		{8,3,5,4,1,6,9,2,7},
		{2,9,6,8,5,7,4,3,1},
		{4,1,7,2,9,3,6,5,8},
		{5,6,9,1,3,4,7,8,2},
		{1,2,3,6,7,8,5,4,9},
		{7,4,8,5,2,9,1,6,3},
		{6,5,2,7,8,1,3,9,4},
		{9,8,1,3,4,5,2,7,6},
		{3,7,4,9,6,2,8,1,5}
	};

	board_type incorrectBoard =
	{
		{8,3,5,4,1,6,9,2,7},
		{2,9,6,8,5,7,4,3,1},
		{4,1,7,2,9,3,6,5,8},
		{5,6,9,1,3,4,7,2,2},
		{1,2,3,6,7,8,5,4,9},
		{7,4,8,5,2,9,1,6,3},
		{6,5,2,7,8,1,3,9,4},
		{9,8,1,3,4,5,2,7,6},
		{3,7,4,9,6,2,8,1,5}
	};

	std::cout << "correctBoard:\n";
	if (subsq_verify(correctBoard))
		std::cout << "\tverified correct.\n";

	std::cout << "incorrectBoard:\n";
	if (subsq_verify(incorrectBoard))
		std::cout << "\tverified correct.\n";
}
