#include <iostream>
#include <thread>
#include <vector>
using namespace std;

void halfsort(vector<int>& set, int start, int halfpoint, int end)
{
	vector<int> firsthalf(set.begin() + start, set.begin() + halfpoint + 1);
	vector<int> secondhalf(set.begin() + halfpoint + 1, set.begin() + end + 1);

	int x = 0;
	int y = 0;
	int index = start;
	while (x < firsthalf.size() && y < secondhalf.size())
	{
		if (firsthalf[x] < secondhalf[y])
			set[index++] = firsthalf[x++];
		else
			set[index++] = secondhalf[y++];
	}

	// merge the left-over elements
	while (x < firsthalf.size())
		set[index++] = firsthalf[x++];
	while (y < secondhalf.size())
		set[index++] = secondhalf[y++];
}

void mergesort(vector<int>& set, int start, int end)
{
	if (start >= end)
		return;

	int halfpoint = start + (end - start) / 2;
	
	thread firsthalf(mergesort, std::ref(set), start, halfpoint);
	thread second(mergesort, std::ref(set), halfpoint + 1, end);
	firsthalf.join();
	second.join();

	halfsort(set, start, halfpoint, end);
}

int main()
{
	int numset[] = { 4, 2, 5, 9, 7, 1, 3, 10, 8, 0};
	int vectsize = sizeof(numset)/sizeof(numset[0]);
	cout << "Unsorted array:" << endl;
	for (int i = 0; i < vectsize; i++)
	{
		cout << numset[i] << " ";
	}
	cout << "\nSorted Array:" << endl;
	vector<int> set(numset, numset + vectsize);
	mergesort(set, 0, vectsize - 1);
	for (int i = 0; i < vectsize; i++)
	{
		cout << set[i] << " ";
	}
	return 0;
}
